library(swirl)
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$landmass,mean)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
objetc.size(plants)
object.size(plants)
inside.names(plants)
names(plants)
head(plants)
head()
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
swirl()
nxt()
nxt()
cars
cars$mpgcity
cars$mpgCity
myMPG<-cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
library(swirl)
swirl()
range(cars$price)
range(price)
range(cars$price)
range(7.4,61.9)
61.9-7.4
var(cars$price)
sd(cars$price)
nxt()
library(swirl)
swirl()
nxt()
19,23
19
library(swirl)
swirl()
install_from_swirl("Open_Intro")
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
swirl()
mtcars
allMPG<-mtcars$mpg
AllMOG
allMPG
mean(allMPG)
sampMeanMPG<-mean(allMPG)
sampVarMPG<-var(allMPG)
n<-lenght(allMPG)
n<-length(allMPG)
tstat<-(sampMeanMPG-12)/sqrt(sampVarMPG/n)
myDF<-n-1
tstat
myDF
pVal1<-pt(tstat,df=myDF,lower.tail=FALSE)
pVal<-pVal1*2
pVal
t.test(allMPG,mu=12,alternative="two.sided")
fileUrl<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile="./data/2Fss06hid.csv",method="curl")
fileUrl<- "https://d396qusza40orc.cloudfront.net/getdata"
download.file(fileUrl,destfile="./data/2Fss06hid.csv",method="curl")
list.file("./data")
fileUrl<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile="downloads/2Fss06hid.csv",method="curl")
download.file(fileUrl, destfile)
fileUrl<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile="downloads/2Fss06hid.csv")
library(RCurl)
URL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
x<-getURL(URL)
x <- getURL(URL, ssl.verifypeer = FALSE)
out<-read.csv(textConnection(x))
head(out[1:6])
sum(x$MHP)
summary()
summary(x)
summary(out)
sum(out$MHP)
head(out)
class(out)
dim(out)
sum(MHP)
sum(out$MHP>$1,000,000)
class(MHP)
class(out$MHP)
sum(out$MHP)
out$MHP[out$MHP>1]
out$MHP[out$MHP>100000]
out$VAL[out$VAL>$1.000.000]
table(out$VAL)
class(out$VAL)
out$VAL[out$VAL>1.000.000]
out$VAL[out$VAL>1000000]
out$VAL[out$VAL>24]
head(out)
table(out$VAL)
table(out$FES)
URL<-https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx
library(RCurl)
URL<-https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx
URL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
x<-getURL(URL, ssl.verifypeer=FALSE)
download.file(URL mode="wb")
download.file(URL, mode="wb")
if(!file.exist("data")){dir.create("data")}
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(CUrl)
library(RCurl)
URL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
x<-getURL(URL)
x<-getURL(URL,ssl.verifypeer=FALSE)
out<-read.csv(textConnection(x))
head(out)
sum(x$VAL)
sum(out$VAL)
class(out)
out$VAL
out$VAL[out$VAL>24]
sum(!is.na(out$VAL[out$VAL==24]))
out$FES
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile="./data/nga.xlsx", method="curl")
dateDownloaded<-date()
library(xlsx)
fileUrl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileUrl, useInternal=TRUE)
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
0
library(swirl)
swirl()
install.packages("~/datasciences/R-Packs/rJava_0.9-6.tar.gz", repos = NULL, type = "source")
install.packages("~/datasciences/R-Packs/xlsxjars_0.6.1.tar.gz", repos = NULL, type = "source")
install.packages("~/datasciences/R-Packs/xlsx_0.5.7.tar.gz", repos = NULL, type = "source")
library(xlsx)
library(rjava)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile="./data/nga.xlsx", method="curl")
dateDownloaded <- date()
library(xlsx)
install.packages(c("digest", "httr", "knitr", "manipulate", "RCurl", "rmarkdown", "swirl"))
install.packages(c("digest", "httr", "knitr", "manipulate", "RCurl",
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile="./data/nga.xlsx", method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile="./data/nga.xlsx", method="curl")
dateDownloaded <- date()
library(xlsx)
install.packages(c("RCurl", "swirl"))
install.packages(c("RCurl", "swirl"))
install.packages(c("RCurl", "swirl"))
install.packages(c("RCurl", "swirl"))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile="./data/nga.xlsx", method="curl")
download.file(fileUrl, destfile="./datasciences/nga.xlsx", method="curl")
download.file(fileUrl, destfile="./download/nga.xlsx", method="curl")
download.file(fileUrl, destfile="download/nga.xlsx", method="curl")
R.home()
MYSQL_HOME
MYSQL_HOME=C:/PROGRA~1/MySQL/MYSQLS~1.0/
Reviron.site:C:/PROGRA~1/R/R-31~1.2/etc/Reviron.site
Renviron.site
MYSQL_HOME<-C:/PROGRA~1/MySQL/MYSQLS~5.6/
Renviron.site
R_LIBS="C:/Program Files (x86)/R/library"
.libPaths()
MYSQL_HOME="C:/Program Files/MySQL/MySQL Server 5.6"
Sys.getenv('MYSQL_HOME')
install.packages("~/datasciences/R-Packs/RMySQL_0.8-0.tar.gz", repos = NULL, type = "source")
library(swirl)
library(swilr)
library(swirl)
install.packages("swirl")
library("swirl")
swirl()
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github","ClientID","ClientSecret")
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
install.packages("httpuv")
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
req<-GET("https://api.github.com/rate_limit",config(token=github_token))
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github","39e97b16feacb72cceac","f6cec202563d3c79445ff5e9c5d67368946bb8ea")
guthub_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
req<-GET("https://api.github.com/rate_limit",config(token=github_token))
guthub_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github","39e97b16feacb72cceac","f6cec202563d3c79445ff5e9c5d67368946bb8ea")
guthub_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github","39e97b16feacb72cceac","f6cec202563d3c79445ff5e9c5d67368946bb8ea")
guthub_token<-oauth2.0_token, cache=FALSE (oauth_endpoints("github"),myapp)
guthub_token<-oauth2.0_token cache=FALSE (oauth_endpoints("github"),myapp)
guthub_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
guthub_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
cls
library(sqldf)
library("sqldf")
install.packages("sqldf")
library(sqldf)
acs<-read.csv("./getdata-data-ss06pid.csv",header=T,sep=",")
acs<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",header=T,sep=",")
sqldf("select pwgtp1 from acs where AGEP<50")
sqldf("select distinct AGEP from acs")
hulr<-http://biostat.jhsph.edu/~jleek/contact.html
hulr<- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(hulr)
htmlCodes <- readlines(con)
htmlCodes <- readLines(con)
close(con)
sapply(htmlCodes[c(10,20,30,100)],nchar)
data <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", header=TRUE)
file_name <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
df <- read.fwf(file=file_name,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
sum(df[,4])
library("swilr")
library(swirl)
swirl()
swirl()
?read.csv
mydf<- read.csv(path2csv, stringAsFactor = FALSE)
mydf<- read.csv(path2csv, header= FALSE, sep= ",", stringsAsFactor = FAlSE)
mydf<- read.csv(path2csv, stringsAsFactor = FALSE)
mydf<-read.csv(path2csv, stringAsFactors = FALSE)
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
(-5:20)
-(5:20)
select-(x:size)
select(cran,-(x:size))
select-(cran, x:size)
select(cran,-x:size)
select(cran, -(x:size))
select(cran, -x:-size)
-select(cran, x:size)
select(cran, -(x,size))
select-(cran, x,size)
0
select(cran, -(x:size))
select(cran, -(X,size))
select(cran, -(X:size))
library(swirl)
swirl()
filter(cran, package =="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, country=="INDIA", r_version=="3.0.2")
filter(cran, r_version <= "3.0.2", country =="IN")
filter(cran, country =="US" | country == "IN")
filter(cran, size > 100500 AND r_os == "linux_gnu")
?and
filter(cran, size > 100500 & r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA.10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na("r_version"))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
desc(ip_id)
desc(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(ip_id:package:size)
cran3 <- select(ip_id:package, ip_id:size)
cran3
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000 bytes)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package, add=FALSE)
by_package
summarize(by_package, mean(size))
?n
pack_sum <- summarize(by_package, count = n(), )
pack_sum <- summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct (country,), avg_bytes = mean(size))
?n_distinct
pack_sum <- summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct (country), avg_bytes = mean(size))
submit()
reset()
submit()
pack_sum <- summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct ("country"), avg_bytes = mean(size))
pack_sum <- summarize(by_package, count = n(), unique = n_distinct(ip_id), avg_bytes = mean(size))
submit()
reset()
reset
reset
reset()
?summarize
pack_sum <- summarise(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct (country), avg_bytes = mean(size))
submit()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
byy_package
by_package
summarize(by_package, mean(size))
pack_sum <- summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes = mean(size))
submit()
?summarize
?n
?n_distintc
??n_distintc
?n_distinct
?summarize
pack_sum <- summarize(group_by(by_package), count = n(), unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes = mean(size))
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
by_package <- group_by(cran, package)
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
submit()
pack_sum <- summarize(by_package,
+                       count = n(),
+                       unique = n_distinct(ip_id),
+                       countries = n_distinct(country),
+                       avg_bytes = mean(size))
pack_sum <- summarize(by_package,
+                       count = n(),
+                       unique = n_distinct(ip_id),
+                       countries = n_distinct(country),
+                       avg_bytes = mean(size))
reset()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
save(pack_sum)
?save
pack_sum
source('C:/Users/Ricardo/AppData/Local/Temp/Rtmp2JyZ4V/summarize1.R')
submit()
pack_sum <- summarize(by_package,
count =  n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
rm(list=ls())
submit()
pack_sum
pack_sum <- summarize(by_package,
+                       count =  n(),
+                       unique = n_distinct(ip_id),
+                       countries = n_distinct(country),
+                       avg_bytes = mean(size))
pack_sum <- summarize(by_package,
count =  n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum <- summarize(by_package,
count =  n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
reset()
pack_sum <- summarize(by_package,
count =  n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
features <- read.table("features.txt")
setwd("C:\\Users\\ricardo\\Documents\\datasciences\\UCI HAR Dataset\\")
source("run_analysis.r")
features <- read.table("features.txt")
index_features <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
X <- X[, index_features]
ds1<- read.table("train/X_train.txt")
ds2<- read.table("test/x_test.txt")
X <- rbind(ds1, ds2)
ds1 <- read.table("train/subject_train.txt")
ds2 <- read.table("test/subject_test.txt")
S <- rbind(ds1, ds2)
ds1 <- read.table("train/y_train.txt")
ds2 <- read.table("test/y_test.txt")
y <- rbind(ds1, ds2)
features <- read.table("features.txt")
index_features <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
X <- X[, index_features]
names(X) <- features[index_features, 2]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
activities <-read.table("activities_labels.txt")
activities <-read.table("activity_labels.txt")
activities[,2] = gsub("_","", tolower(as.character(activities[, 2])))
ds1 <- read.table("train/y_train.txt")
ds2 <- read.table("test/y_test.txt")
Y <- rbind(ds1, ds2)
Y[,1]=activities[Y[,1],2]
names(Y) <- "activity"
names(S) <- "subject"
cleaned <- cbind(S, Y, X)
write.table(cleaned, "merged_cleaned_data.txt")
names(S) <- "subject"
cleaned <- cbind(S, Y, X)
write.table(cleaned, "merged_cleaned_data.txt")
uniqueSubjects = unique(S)[,1]
numSubjects = length(unique(S)[,1])
numActivities = length(activities[,1])
numCols = dim(cleaned)[2]
result = cleaned[1:(numSubjects*numActivities),]
row = 1
for(s in 1:numSubjects)
for (a in 1:numActivities){result[row, 1] = uniqueSubjects[s]}
row = 1
for (s in 1:numSubjects) {
for (a in 1:numActivities) {
result[row, 1] = uniqueSubjects[s]
result[row, 2] = activities[a, 2]
tmp <- cleaned[cleaned$subject==s & cleaned$activity==activities[a, 2], ]
result[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(result, "data_set_with_the_averages.txt")
